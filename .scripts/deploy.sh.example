#!/bin/bash

set -e

# Replace these with your bot token and chat ID
TELEGRAM_BOT_TOKEN="<YOUR_BOT_TOKEN>"
TELEGRAM_CHAT_ID="<YOUR_CHAT_ID>"

function send_telegram_alert {
    local message="$1"
    curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
    -d chat_id="$TELEGRAM_CHAT_ID" \
    -d text="$message"
}

function error_exit {
    local message="$1"
    send_telegram_alert "ðŸ”´ Deployment failed: $message"
    exit 1
}

echo "âœ… Deploying Application ..."

# Enter maintenance mode
if php artisan down; then
    echo "âœ… Application is now in maintenance mode."
else
    error_exit "ðŸš¨ Failed to enter maintenance mode."
fi

# Update codebase
if git pull origin development; then
    echo "âœ… Codebase updated from development."
else
    error_exit "ðŸš¨ Failed to update codebase."
fi

# Install dependencies
if composer install --no-interaction --prefer-dist --optimize-autoloader; then
    echo "âœ… Composer dependencies installed."
else
    error_exit "ðŸš¨ Failed to install composer dependencies."
fi

# Cache view
if php artisan view:cache; then
    echo "âœ… Cache Views."
else
    error_exit "ðŸš¨ Failed to Cache Views."
fi

# Cache config
if php artisan config:cache; then
    echo "âœ… Cache configs."
else
    error_exit "ðŸš¨ Failed to Cache configs."
fi

# Cache route
if php artisan route:cache; then
    echo "âœ… Cache routes."
else
    error_exit "ðŸš¨ Failed to Cache routes."
fi

# Cache event
if php artisan event:cache; then
    echo "âœ… Cache events."
else
    error_exit "ðŸš¨ Failed to Cache events."
fi

# Regenerate autoload files
if composer dump-autoload; then
    echo "âœ… Autoload files regenerated."
else
    error_exit "ðŸš¨ Failed to regenerate autoload files."
fi

# Exit maintenance mode
if php artisan up; then
    echo "âœ… Application is now live."
else
    error_exit "ðŸš¨ Failed to exit maintenance mode."
fi

# Send success alert
send_telegram_alert "ðŸŸ¢ Deployment succeeded. The application is now live."

echo "âœ… Application Deployed Successfully"
